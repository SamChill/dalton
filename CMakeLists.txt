cmake_minimum_required (VERSION 2.8.12)

project("Dalton")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated-declarations")

# Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)

# Add the configurations from nanogui
add_subdirectory(ext/nanogui)

# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})

# On top of adding the path to nanogui/include, you may need extras
include_directories(${NANOGUI_EXTRA_INCS})
include_directories(ext/nanogui/include/)

# Program to embed shaders.
include_directories(ext/embed-resource)
add_subdirectory(ext/embed-resource)
embed_resources(Shaders shaders/vertex.glsl shaders/fragment.glsl)

# Compile a target using NanoGUI
file(GLOB Sources "src/*.cpp")
 
add_executable(dalton ${Sources} ${Shaders})

# Lastly, additional libraries may have been built for you.  In addition to linking
# against NanoGUI, we need to link against those as well.
target_link_libraries(dalton nanogui ${NANOGUI_EXTRA_LIBS})
